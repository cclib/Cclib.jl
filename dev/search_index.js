var documenterSearchIndex = {"docs":
[{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cclib.jl is a Julia wrapper around Cclib - an open source library written in Python for parsing and interpreting the results of computational chemistry packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It allows to perform natively in Julia the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parse data from the output files generated by computational chemistry programs, such as Gaussian, GAMESS, PSI4 etc.\nProvide a consistent interface to the results of computational chemistry calculations, particularly those results that are useful for algorithms or visualization\nFacilitate the implementation of algorithms that are not specific to a particular computational chemistry package\nMaximize interoperability with other open source computational chemistry and cheminformatic software libraries","category":"page"},{"location":"#How-to-install","page":"Home","title":"How to install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Cclib.jl, start up and type the following into the REPL.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"Cclib\")","category":"page"},{"location":"atombase/#AtomsBase-Integration","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"","category":"section"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"Cclib.jl allows loading atom information into AtomsBase.jl objects using get_atom_objects function:","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"# Input file can be found in the in the repo under \"test\" folder\njulia> using Cclib\njulia> using AtomsBase\njulia> mol = ccread(\"./Trp_polar.fchk\")\njulia> atoms = get_atom_objects(mol)\njulia> atoms[1]\n\nAtom(N, atomic_number = 7, atomic_mass = 14.007 u):\n    position          : [-0.069982688,0.33219872,0.28212832]u\"Å\"","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"Like before, all the stored information for each atom is still accessible:","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"julia> keys(atoms[1])\n(:position, :velocity, :atomic_symbol, :atomic_number, :atomic_mass)","category":"page"},{"location":"atombase/#Interoperability-With-Other-Tools","page":"AtomsBase Integration","title":"Interoperability With Other Tools","text":"","category":"section"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"We can use data loaded with Cclib.jl to perform calculations using other libraries that use AtomsBase.jl, such as InteratomicPotentials.jl","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"First, we load the data and define the system:","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"julia> using Cclib\njulia> using AtomsBase\njulia> using Unitful\njulia> using UnitfulAtomic\njulia> using InteratomicPotentials\n\njulia> atoms = get_atom_objects(\"./Trp_polar.fchk\")\njulia> boundaryconditions = [Periodic(), Periodic(), Periodic()]\njulia> box = [[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]]u\"Å\"\njulia> system = FlexibleSystem(atoms, box, boundaryconditions)\n\nFlexibleSystem(C₁₁H₁₂N₂O₂, periodic = TTT):\n    bounding_box      : [      10        0        0;\n                                0       10        0;\n                                0        0       10]u\"Å\"\n\n          .------------------------.\n         /|  H                     |\n        / |                        |\n       /  |                        |\n      /   |    H  C      C  H      |\n     /    H                        |\n    *  C  C     C  C H C    H      |\n    |   H |  C    HN    H          |\n    |     |                        |\n    |     |   C  C                 |\n    |     |    C                   |\n    |     |      O                 |\n    |     .----------------------H-.\n    |    /                        /\n    |   /                        /\n    | H/O                       /\n    | /          H             /\n    |/                       N/\n    *------------------------*","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"We can now perform calculate various properties of the system:","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"julia> ϵ = 1.0 * 1u\"eV\"\njulia> σ = 0.25 * 1u\"Å\"\njulia> rcutoff  = 2.25 * 1u\"Å\"\njulia> lj = LennardJones(ϵ, σ, rcutoff, [:N, :C, :O, :H])\njulia> potential_energy(system, lj).\n-0.00039418327614247183 Eₕ","category":"page"},{"location":"atombase/","page":"AtomsBase Integration","title":"AtomsBase Integration","text":"Refer to InteratomicPotentials.jl documentation for more details.","category":"page"},{"location":"io/#Reading-files","page":"How to parse files","title":"Reading files","text":"","category":"section"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"This page outlines how to access information store in computational chemistry output files.","category":"page"},{"location":"io/#Supported-formats","page":"How to parse files","title":"Supported formats","text":"","category":"section"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"Properties that can be parsed and supported file formats can be found here.","category":"page"},{"location":"io/#How-to-read-files","page":"How to parse files","title":"How to read files","text":"","category":"section"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"# Input file can be found in the in the repo under \"test\" folder\njulia> using Cclib\njulia> mol = ccread(\"uracil_two.xyz\")","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"The data is now stored in mol variable. To see what data it contains, we can use the keys function that comes with the standard library.","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"julia> keys(mol)\nKeySet for a Dict{String, Any} with 4 entries. Keys:\n  \"atomcoords\"\n  \"natom\"\n  \"atomnos\"\n  \"metadata\"","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"Accessing the data is identical to how one would access data in a dictionary:","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"julia> mol[\"natom\"]\n12","category":"page"}]
}
