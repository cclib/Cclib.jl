var documenterSearchIndex = {"docs":
[{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cclib.jl is a Julia wrapper around Cclib - an open source library written in Python for parsing and interpreting the results of computational chemistry packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It allows to perform natively in Julia the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parse data from the output files generated by computational chemistry programs, such as Gaussian, GAMESS, PSI4 etc.\nProvide a consistent interface to the results of computational chemistry calculations, particularly those results that are useful for algorithms or visualization\nFacilitate the implementation of algorithms that are not specific to a particular computational chemistry package\nMaximize interoperability with other open source computational chemistry and cheminformatic software libraries","category":"page"},{"location":"#How-to-install","page":"Home","title":"How to install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Cclib.jl, start up and type the following into the REPL.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"Cclib\")","category":"page"},{"location":"io/#Reading-files","page":"How to parse files","title":"Reading files","text":"","category":"section"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"This page outlines how to access information store in computational chemistry output files.","category":"page"},{"location":"io/#Supported-formats","page":"How to parse files","title":"Supported formats","text":"","category":"section"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"Properties that can be parsed and supported file formats can be found here.","category":"page"},{"location":"io/#How-to-read-files","page":"How to parse files","title":"How to read files","text":"","category":"section"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"julia> using Cclib\njulia> mol = ccread(\"uracil_two.xyz\")","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"The data is now stored in mol variable. To see what data it contains, we can use the keys function that comes with the standard library.","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"julia> keys(mol)\nKeySet for a Dict{String, Any} with 4 entries. Keys:\n  \"atomcoords\"\n  \"natom\"\n  \"atomnos\"\n  \"metadata\"","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"Accessing the data is identical to how one would access data in a dictionary:","category":"page"},{"location":"io/","page":"How to parse files","title":"How to parse files","text":"julia> mol[\"natom\"]\n12","category":"page"}]
}
